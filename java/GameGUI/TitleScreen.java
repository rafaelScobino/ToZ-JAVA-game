package GameGUI;

import GameMechanics.Tower;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class TitleScreen extends JPanel {
    public JPanel TitleScreen;
    public JPanel titlePanel;
    public JPanel btnsPanel;
    public JPanel namePanel;
    public JButton NgBtn;
    public JButton LOADGAMEButton;
    public JButton zanasGrimoireButton;
    public JTextPane welcome;
    public JTextPane gameTitle;





    public static void main(String[] args) {
        JFrame frame = new JFrame("TitleScreen");
        frame.setContentPane(new TitleScreen().TitleScreen);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        TitleScreen = new JPanel();
        TitleScreen.setLayout(new BorderLayout(0, 0));
        TitleScreen.setBackground(new Color(-16777216));
        TitleScreen.setForeground(new Color(-16777216));
        TitleScreen.setMaximumSize(new Dimension(1100, 900));
        TitleScreen.setMinimumSize(new Dimension(1100, 900));
        TitleScreen.setPreferredSize(new Dimension(1100, 900));
        titlePanel = new JPanel();
        titlePanel.setLayout(new BorderLayout(0, 0));
        titlePanel.setAlignmentY(1.0f);
        titlePanel.setBackground(new Color(-16777216));
        titlePanel.setFocusable(false);
        titlePanel.setForeground(new Color(-15132304));
        titlePanel.setOpaque(false);
        titlePanel.setPreferredSize(new Dimension(1100, 400));
        TitleScreen.add(titlePanel, BorderLayout.CENTER);
        namePanel = new JPanel();
        namePanel.setLayout(new BorderLayout(0, 0));
        namePanel.setBackground(new Color(-16777216));
        namePanel.setMaximumSize(new Dimension(1100, 300));
        namePanel.setMinimumSize(new Dimension(1100, 300));
        namePanel.setPreferredSize(new Dimension(1100, 300));
        titlePanel.add(namePanel, BorderLayout.NORTH);
        welcome = new JTextPane();
        welcome.setBackground(new Color(-16777216));
        welcome.setCaretColor(new Color(-28339));
        welcome.setDisabledTextColor(new Color(-28339));
        welcome.setEditable(false);
        Font welcomeFont = this.$$$getFont$$$("Castellar", Font.BOLD, 20, welcome.getFont());
        if (welcomeFont != null) welcome.setFont(welcomeFont);
        welcome.setForeground(new Color(-28339));
        welcome.setMargin(new Insets(50, 450, 3, 3));
        welcome.setPreferredSize(new Dimension(1100, 100));
        welcome.setText("Welcome To:");
        namePanel.add(welcome, BorderLayout.CENTER);
        gameTitle = new JTextPane();
        gameTitle.setBackground(new Color(-16777216));
        gameTitle.setCaretColor(new Color(-28339));
        gameTitle.setEditable(false);
        Font gameTitleFont = this.$$$getFont$$$("Castellar", Font.BOLD, 48, gameTitle.getFont());
        if (gameTitleFont != null) gameTitle.setFont(gameTitleFont);
        gameTitle.setForeground(new Color(-28339));
        gameTitle.setMargin(new Insets(50, 300, 50, 50));
        gameTitle.setMaximumSize(new Dimension(1100, 200));
        gameTitle.setMinimumSize(new Dimension(1100, 200));
        gameTitle.setPreferredSize(new Dimension(1100, 200));
        gameTitle.setText("Tower of Zanas");
        namePanel.add(gameTitle, BorderLayout.SOUTH);
        btnsPanel = new JPanel();
        btnsPanel.setLayout(new BorderLayout(0, 0));
        btnsPanel.setBackground(new Color(-16777216));
        btnsPanel.setMaximumSize(new Dimension(1100, 100));
        btnsPanel.setMinimumSize(new Dimension(1100, 100));
        btnsPanel.setPreferredSize(new Dimension(1100, 100));
        titlePanel.add(btnsPanel, BorderLayout.CENTER);
        NgBtn = new JButton();
        NgBtn.setBackground(new Color(-15132304));
        NgBtn.setFocusPainted(false);
        NgBtn.setFocusable(false);
        Font NgBtnFont = this.$$$getFont$$$("Castellar", Font.BOLD, 20, NgBtn.getFont());
        if (NgBtnFont != null) NgBtn.setFont(NgBtnFont);
        NgBtn.setForeground(new Color(-28339));
        NgBtn.setName("ngBtn");
        NgBtn.setPreferredSize(new Dimension(366, 30));
        NgBtn.setRequestFocusEnabled(false);
        NgBtn.setText("NEW GAME");
        btnsPanel.add(NgBtn, BorderLayout.WEST);
        LOADGAMEButton = new JButton();
        LOADGAMEButton.setBackground(new Color(-15132304));
        LOADGAMEButton.setFocusPainted(false);
        LOADGAMEButton.setFocusable(false);
        Font LOADGAMEButtonFont = this.$$$getFont$$$("Castellar", Font.BOLD, 20, LOADGAMEButton.getFont());
        if (LOADGAMEButtonFont != null) LOADGAMEButton.setFont(LOADGAMEButtonFont);
        LOADGAMEButton.setForeground(new Color(-28339));
        LOADGAMEButton.setPreferredSize(new Dimension(366, 30));
        LOADGAMEButton.setRequestFocusEnabled(false);
        LOADGAMEButton.setText("LOAD GAME");
        btnsPanel.add(LOADGAMEButton, BorderLayout.CENTER);
        zanasGrimoireButton = new JButton();
        zanasGrimoireButton.setBackground(new Color(-15132304));
        zanasGrimoireButton.setFocusPainted(false);
        zanasGrimoireButton.setFocusable(false);
        Font zanasGrimoireButtonFont = this.$$$getFont$$$("Castellar", Font.BOLD, 20, zanasGrimoireButton.getFont());
        if (zanasGrimoireButtonFont != null) zanasGrimoireButton.setFont(zanasGrimoireButtonFont);
        zanasGrimoireButton.setForeground(new Color(-28339));
        zanasGrimoireButton.setPreferredSize(new Dimension(366, 30));
        zanasGrimoireButton.setRequestFocusEnabled(false);
        zanasGrimoireButton.setText("Zanas Grimoire");
        btnsPanel.add(zanasGrimoireButton, BorderLayout.EAST);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setMaximumSize(new Dimension(1100, 500));
        panel1.setMinimumSize(new Dimension(1100, 500));
        panel1.setPreferredSize(new Dimension(1100, 500));
        TitleScreen.add(panel1, BorderLayout.SOUTH);
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(4);
        label1.setIcon(new ImageIcon(getClass().getResource("/Tower/leftTowerg.gif")));
        label1.setIconTextGap(0);
        label1.setMaximumSize(new Dimension(400, 500));
        label1.setMinimumSize(new Dimension(400, 500));
        label1.setPreferredSize(new Dimension(400, 500));
        label1.setText("");
        panel1.add(label1, BorderLayout.WEST);
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(0);
        label2.setIcon(new ImageIcon(getClass().getResource("/Tower/Tower.gif")));
        label2.setIconTextGap(0);
        label2.setText("");
        panel1.add(label2, BorderLayout.CENTER);
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(2);
        label3.setHorizontalTextPosition(2);
        label3.setIcon(new ImageIcon(getClass().getResource("/Tower/rightTower.gif")));
        label3.setIconTextGap(0);
        label3.setMaximumSize(new Dimension(400, 500));
        label3.setMinimumSize(new Dimension(400, 500));
        label3.setPreferredSize(new Dimension(400, 500));
        label3.setText("");
        panel1.add(label3, BorderLayout.EAST);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return TitleScreen;
    }

}
